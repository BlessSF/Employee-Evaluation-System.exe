<?php 
session_start();
if (!isset($_SESSION['admin_logged_in']) || $_SESSION['admin_logged_in'] !== true) {
    header("Location: login.php");
    exit;
}

// Database connection
$conn = new mysqli("localhost", "root", "", "employee_evaluation");
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get admin username from session
$admin_username = $_SESSION['admin_username'] ?? 'Unknown';  // Use session username if available

// Handle search query
$search_query = isset($_GET['search']) ? trim($_GET['search']) : "";

// Modify the SQL to handle empty or NULL changed_by values
$sql = "
    SELECT l.*, e.surname, e.first_name,
           IFNULL(NULLIF(l.changed_by, ''), 'Admin') AS changed_by,
           DATE_FORMAT(l.changed_at, '%Y-%m-%d') AS changed_at  -- Format the date to show only the YYYY-MM-DD part
    FROM employee_audit_log AS l
    LEFT JOIN employees AS e ON l.employee_id = e.id
    WHERE (e.surname LIKE ? OR e.first_name LIKE ? OR l.changed_by LIKE ?)
    ORDER BY l.changed_at DESC
";
$stmt = $conn->prepare($sql);

// If there's a search term, filter the records accordingly
$search_param = "%{$search_query}%";
$stmt->bind_param("sss", $search_param, $search_param, $search_param);
$stmt->execute();
$result = $stmt->get_result();

/**
 * Helper function to parse key-value pairs from log
 */
function parseKeyValueString($str) {
    $pairs = explode(',', $str);
    $data  = [];
    foreach ($pairs as $pair) {
        $pair = trim($pair);
        if (strpos($pair, ':') !== false) {
            list($key, $val) = explode(':', $pair, 2);
            $key = trim($key);
            $val = trim($val);
            $data[$key] = $val;
        }
    }
    return $data;
}

/**
 * Show only changed fields between old & new values
 */
function buildDifferences($oldVal, $newVal) {
    $oldArr = parseKeyValueString($oldVal);
    $newArr = parseKeyValueString($newVal);

    $diffs = [];
    foreach ($newArr as $key => $newV) {
        $oldV = isset($oldArr[$key]) ? $oldArr[$key] : '';
        if ($oldV !== $newV) {
            $diffs[] = "$key: '$oldV' â†’ '$newV'";
        }
    }
    return !empty($diffs) ? implode('; ', $diffs) : "No fields changed.";
}

// If AJAX request, return only the table rows
if (isset($_GET['ajax'])) {
    $rows = '';
    $counter = 1;
    while ($row = $result->fetch_assoc()) {
        $rows .= '<tr>
                    <td>' . $counter++ . '</td>
                    <td>' . htmlspecialchars($row['surname'] . ' ' . $row['first_name'] ?: 'Deleted Employee') . '</td>
                    <td>' . htmlspecialchars($row['action']) . ': ' . buildDifferences($row['old_value'], $row['new_value']) . '</td>
                    <td>' . htmlspecialchars($row['changed_by']) . '</td>
                    <td>' . htmlspecialchars($row['changed_at']) . '</td>
                </tr>';
    }
    echo $rows;
    exit;
}

// Format Action and Changes
function formatAction($action, $oldVal, $newVal) {
    $formattedAction = "<strong>" . htmlspecialchars($action) . "</strong>";  // Make the action bold
    if (strcasecmp($action, 'Update') === 0) {
        return $formattedAction . ": " . buildDifferences($oldVal, $newVal);
    } elseif (strcasecmp($action, 'Add') === 0) {
        return $formattedAction . ": Employee Added.";
    } elseif (strcasecmp($action, 'Delete') === 0) {
        return "<strong>Delete</strong>: Employee Deleted.";
    }
    return $formattedAction;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Employee Tracking Logs</title>
    <link rel="stylesheet" href="css/style.css">
    <style>
        .sidenav a.active {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }
        .main {
            margin-left: 260px;
            padding: 20px;
        }
        h1 {
            text-align: center;
            background-color: #087356;
            color: white;
            padding: 15px;
            border-radius: 5px;
        }
        .sidenav a.active {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }

        /* Table Styling */
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 20px auto;
            background-color: #fff;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        }
        thead {
            background-color: #007bff;
            color: black;
        }
        th, td {
            padding: 10px 12px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }
        tr:hover {
            background-color: #f9f9f9;
        }
        th {
            font-weight: bold;
        }
 /* Smaller mobile devices (portrait mode) */
 @media (max-width: 480px) {
            .sidenav {
                width: 100%;
                position: relative;
                height: auto;
            }

            .main {
                margin-left: 0;
                padding: 10px;
            }

            .sidenav a {
                font-size: 14px;
                padding: 10px;
            }

            .stats-card {
                padding: 10px;
                font-size: 14px;
            }

            .stats-card .number {
                font-size: 24px;
            }

            .section-title {
                font-size: 18px;
            }

            /* Adjust the side navigation to a more compact look */
            .sidenav {
                width: 100%;
            }
        }
        /* Search bar */
        .search-container {
            text-align: center;
            margin: 20px 0;
        }
        .search-container input {
            width: 150px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
        }

        /* Responsive for smaller screens */
        @media (max-width: 768px) {
            table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
               
            }

            table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
                width:100%;
            }
        
            thead {
                background-color: #007bff;
                color: white;    
                
            }

            tr {
                margin-bottom: 15px;
                background-color: #fff;
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            }

            
            td {
                padding: 8px;
                border-bottom: none;
            }
        }

        @media (max-width: 480px) {
            .search-container input {
                width: 350px;
                margin-bottom: 20px;
            }

            table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }

            .view-details, .download-pdf {
                font-size: 12px;
                padding: 6px 8px;
            }
        }

    </style>
    <script>
        function searchEmployee() {
            let query = document.getElementById("searchInput").value.trim();

            // Create a new XMLHttpRequest object
            let xhr = new XMLHttpRequest();

            // Define what happens when the request finishes
            xhr.onload = function() {
                if (xhr.status === 200) {
                    // Update only the table body content with the response (AJAX)
                    document.getElementById("tableBody").innerHTML = xhr.responseText;
                }
            };

            // If the search query is empty, reload the page to show all data
            if (query === "") {
                location.reload();  // Refresh the page to show all records
            } else {
                // Open a GET request to fetch the table rows (AJAX)
                xhr.open('GET', 'employee_tracking.php?search=' + encodeURIComponent(query) + '&ajax=true', true);
                xhr.send();
            }
        }
    </script>
</head>
<body>
<!-- Side Navigation -->
<div class="sidenav">
    <div class="logo-container">
        <img src="images/Logo.jpg" alt="Nina Trading Logo" class="logo">
    </div>
        <a href="index.php" >Dashboard</a>
        <a href="employees.php">Probationary Employees</a>
        <a href="regular_employees.php">Regular Employees</a>
        <a href="upload.php">Upload Employee Data</a>
        <a href="notification.php">Employee Evaluations</a>
        <a href="evaluated_employees.php">Evaluated Employees</a>
        <a href="employee_tracking.php"class="active">Employee Actions Tracking</a>
        <a href="logout.php" class="logout-button">Log Out</a>
</div>

<div class="main">
    <h1>Employee Audit Log</h1>

    <!-- Search Bar -->
    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search employee by name or changed by..." 
               value="<?= htmlspecialchars($search_query) ?>" onkeyup="searchEmployee()">
    </div>

    <?php if ($result && $result->num_rows > 0): ?>
        <table>
            <thead>
                <tr>
                    <th>No.</th>
                    <th>Employee Name</th>
                    <th>Action & Changes</th>
                    <th>Changed By</th>
                    <th>Changed At</th>
                </tr>
            </thead>
            <tbody id="tableBody">
            <?php 
            $counter = 1;
            while ($row = $result->fetch_assoc()): ?>
                <tr>
                    <td><?= $counter++; ?></td>
                    <td><?= htmlspecialchars($row['surname'] . ', ' . $row['first_name'] ?: 'Deleted Employee') ?></td>
                    <td><?= formatAction($row['action'], $row['old_value'], $row['new_value']) ?></td>
                    <td><?= htmlspecialchars($row['changed_by']) ?></td>
                    <td><?= htmlspecialchars($row['changed_at']) ?></td>
                </tr>
            <?php endwhile; ?>
            </tbody>
        </table>
    <?php else: ?>
        <p style="text-align:center;">No matching records found.</p>
    <?php endif; ?>
</div>

</body>
</html>

<?php $conn->close(); ?>

Close the database connection
$conn->close();


















































































<?php
// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Start session and check if the user is logged in
session_start();
if (!isset($_SESSION['admin_logged_in']) || $_SESSION['admin_logged_in'] !== true) {
    header('Location: login.php');
    exit;
}

// Database connection details
$host = 'localhost';
$dbname = 'employee_evaluation';
$username = 'root';
$password = '';

// Create the database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check for database connection error
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Search functionality (if search query is provided)
$searchQuery = "";
if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchQuery = $_GET['search'];

    // SQL query to fetch PUB employees and their payroll data
    $sql = "SELECT e.id, e.surname, e.first_name, e.position, e.status, e.branch, 
                   p.daily_rate, p.rate_per_hour, p.no_of_days, p.no_of_hours, p.basic_pay
            FROM employees e
            LEFT JOIN pub_payroll p ON e.id = p.employee_id
            WHERE (e.first_name LIKE ? OR e.surname LIKE ?)
            AND e.branch = 'PUB' AND e.branch != 'STELLA' AND e.branch != 'DOIS'";

    $stmt = $conn->prepare($sql);
    $likeSearchQuery = "%$searchQuery%";
    $stmt->bind_param('ss', $likeSearchQuery, $likeSearchQuery);
    $stmt->execute();
    $result = $stmt->get_result();
} else {
    // SQL query to fetch PUB employees and their payroll data
    $sql = "SELECT e.id, e.surname, e.first_name, e.position, e.status, e.branch, 
                   p.daily_rate, p.rate_per_hour, p.no_of_days, p.no_of_hours, p.basic_pay
            FROM employees e
            LEFT JOIN pub_payroll p ON e.id = p.employee_id
            WHERE e.branch = 'PUB' AND e.branch != 'STELLA' AND e.branch != 'DOIS'";

    $result = $conn->query($sql);
}

// Check if the query was successful
if (!$result) {
    die("Query failed: " . $conn->error);
}

// Helper function to safely apply htmlspecialchars
function safe_htmlspecialchars($value) {
    return htmlspecialchars($value ?? '', ENT_QUOTES, 'UTF-8');
}

// Helper function to capitalize the first letter of each word safely
function ucfirst_safe($value) {
    return ucfirst(htmlspecialchars($value ?? '', ENT_QUOTES, 'UTF-8'));
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payroll Data</title>
    <link rel="stylesheet" href="css/style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            display: flex;
            margin: 0;
            height: 100vh;
        }

        .main {
            margin-left: 250px;
            padding: 20px;
            flex: 1;
            overflow-x: auto;
        }

        .download-btn, .save-btn {
            background-color: #28a745;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            display: inline-block;
            transition: background-color 0.3s ease;
            margin-top: 5px;
        }

        .download-btn:hover, .save-btn:hover {
            background-color: #218838;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #fff;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            table-layout: fixed;
        }

        thead {
            background-color: #007bff;
            color: white;
        }

        th, td {
            padding: 20px;
            border-bottom: 5px solid #ddd;
            width: 200px;
            text-align: left;
        }

        th {
            font-weight: bold;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            body {
                flex-direction: column;
            }

            .sidenav {
                position: static;
                width: 100%;
                height: auto;
            }

            .main {
                margin-left: 0;
                padding: 10px;
            }

            table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }
        }
    </style>
</head>
<body>

    <!-- Side Navigation -->
    <div class="sidenav">
        <div class="logo-container">
            <img src="images/Logo.jpg" alt="Nina Trading Logo" class="logo">
        </div>
        <a href="index.php">Dashboard</a>
        <a href="employees.php">Probationary Employees</a>
        <a href="regular_employees.php">Regular Employees</a>
        <a href="upload.php">Upload Employee Data</a>
        <a href="payroll_upload.php">Upload Payroll Data</a>
        <a href="payroll_data.php" class="active">View Payroll Data</a>
        <a href="notification.php">Employee Evaluations</a>

        <a href="notification.php">Employee Evaluations</a><a href="notification.php">Employee Evaluations</a>
        <a href="evaluated_employees.php">Evaluated Employees</a>
        <a href="employee_tracking.php">Employee Actions Tracking</a>
        <a href="logout.php" class="logout-button">Log Out</a>
    </div>

    <div class="main">
        <header>
            <h1>Payroll Data</h1>
        </header>

        <!-- Search Bar -->
        <div class="search-container">
            <input type="text" id="searchInput" placeholder="Search by employee name..." onkeyup="searchEmployee()">
        </div>

        <!-- Main Employee Table -->
        <table>
            <thead>
                <tr>
                    <th>Employee Name</th>
                    <th>Daily Rate</th>
                    <th>Rate/HR</th>
                    <th>No. of Days</th>
                    <th>No. of Hours</th>
                    <th>Basic Pay</th>
                    <th>DAYS</th>
                    <th>AMOUNT</th>
                    <th>RATE</th>
                    <th>HOUR</th>
                    <th>TOTAL</th>
                    <th>ALLOW</th>
                    <th>Medical Reimbursement</th>
                    <th>Hours/ND</th>
                    <th>10%</th>
                    <th>Hours/HP</th>
                    <th>100%</th>
                    <th>HOURS/HD</th>
                    <th>30%</th>
                    <th>Gross Pay</th>
                    <th>PHILHEALTH</th>
                    <th>SSS LOAN</th>
                    <th>SSS</th>
                    <th>HDMF</th>
                    <th>HDMF LOAN</th>
                    <th>INSURANCE</th>
                    <th>CASH ADVANCE</th>
                    <th>BHOUSE</th>
                    <th>Total Deductions</th>
                    <th>Leave with Pay</th>
                    <th>Incentives</th>
                    <th>Net Pay</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <?php
                while ($row = $result->fetch_assoc()) {
                    echo "<tr>";
                    echo "<td><input type='text' value='" . ucfirst_safe($row['first_name']) . " " . ucfirst_safe($row['surname']) . "' disabled /></td>";
                    echo "<td><input type='number' name='daily_rate' value='" . (isset($row['daily_rate']) ? $row['daily_rate'] : '0.00') . "' /></td>";
                    echo "<td><input type='number' name='rate_per_hour' value='0' readonly /></td>";
                    echo "<td><input type='number' name='no_of_days' value='" . (isset($row['no_of_days']) ? $row['no_of_days'] : '0') . "' /></td>";
                    echo "<td><input type='number' name='no_of_hours' value='0' readonly /></td>";
                    echo "<td><input type='number' name='basic_pay' value='0' readonly /></td>";

                    // DAYS and AMOUNT
                    echo "<td><input type='number' name='days' value='0' /></td>";
                    echo "<td><input type='number' name='amount' value='0' readonly /></td>";

                    // RATE, HOUR, TOTAL, ALLOW, HOURS, and 30%
                    echo "<td><input type='number' name='rate' value='0' readonly /></td>";
                    echo "<td><input type='number' name='hour' value='0' /></td>";
                    echo "<td><input type='number' name='total' value='0' readonly /></td>";
                    echo "<td><input type='number' name='allow' value='0' readonly /></td>";
                    echo "<td><input type='number' name='medical_reimbursement' value='0' /></td>";
                    echo "<td><input type='number' name='hours_nd' value='0' /></td>";
                    echo "<td><input type='number' name='percent10' value='0' readonly /></td>";
                    echo "<td><input type='number' name='hours_hp' value='0' /></td>";
                    echo "<td><input type='number' name='percent100' value='0' readonly /></td>";
                    echo "<td><input type='number' name='hours' value='0' /></td>";
                    echo "<td><input type='number' name='percent30' value='0' readonly /></td>";

                    // Gross pay calculation
                    echo "<td><input type='number' name='gross_pay' value='0' readonly /></td>";

                    // Deductions fields
                    echo "<td><input type='number' name='philhealth' value='0' /></td>";
                    echo "<td><input type='number' name='sss_loan' value='0' /></td>";
                    echo "<td><input type='number' name='sss' value='0' /></td>";
                    echo "<td><input type='number' name='hdmf' value='0' /></td>";
                    echo "<td><input type='number' name='hdmf_loan' value='0' /></td>";
                    echo "<td><input type='number' name='insurance' value='0' /></td>";
                    echo "<td><input type='number' name='cash_advance' value='0' /></td>";
                    echo "<td><input type='number' name='bhouse' value='0' /></td>";
                    echo "<td><input type='number' name='total_deductions' value='0' readonly /></td>";

                    // Leave with Pay and Incentives fields
                    echo "<td><input type='number' name='leave_with_pay' value='0' /></td>";
                    echo "<td><input type='number' name='incentives' value='0' /></td>";

                    // Net pay field
                    echo "<td><input type='number' name='net_pay' value='0' readonly /></td>";

                    // Actions
                    echo "<td><a href='payslip.php?id=" . $row['id'] . "' class='download-btn'>View</a>";
                    echo "<button class='save-btn' onclick='savePayrollData(" . $row['id'] . ")'>Save</button></td>";
                    echo "</tr>";
                }
                ?>
            </tbody>
        </table>
    </div>

    <script>
        // Function to filter employee names by search query
        function searchEmployee() {
            var input = document.getElementById("searchInput").value.toLowerCase();
            var rows = document.getElementById("tableBody").getElementsByTagName("tr");

            for (var i = 0; i < rows.length; i++) {
                var nameCell = rows[i].getElementsByTagName("td")[0]; // Employee Name is in the 1st column
                if (nameCell) {
                    var name = nameCell.textContent || nameCell.innerText;
                    rows[i].style.display = name.toLowerCase().indexOf(input) > -1 ? "" : "none";
                }
            }
        }

        // Function to calculate payroll dynamically
        function calculatePayroll(row) {
            var dailyRate = parseFloat(row.querySelector('[name="daily_rate"]').value) || 0;
            var noOfDays = parseFloat(row.querySelector('[name="no_of_days"]').value) || 0;
            var overtimeRate = parseFloat(row.querySelector('[name="rate_per_hour"]').value) || 0;
            var overtimeHours = parseFloat(row.querySelector('[name="no_of_hours"]').value) || 0;

            // Calculate No. of Hours = No. of Days * 8
            var totalHours = noOfDays * 8;
            row.querySelector('[name="no_of_hours"]').value = totalHours;

            // Calculate Rate/HR = Daily Rate / 8
            var ratePerHour = dailyRate / 8;
            row.querySelector('[name="rate_per_hour"]').value = ratePerHour.toFixed(2);

            // Basic Pay = Daily Rate * No. of Days
            var basicPay = dailyRate * noOfDays;
            row.querySelector('[name="basic_pay"]').value = basicPay.toFixed(2);

            // DAYS and AMOUNT calculation
            var days = parseFloat(row.querySelector('[name="days"]').value) || 0;
            var amount = dailyRate * days;
            row.querySelector('[name="amount"]').value = amount.toFixed(2);

            // Add AMOUNT to the Basic Pay if there's any
            basicPay += amount;
            row.querySelector('[name="basic_pay"]').value = basicPay.toFixed(2);

            // RATE calculation
            var rate = ratePerHour * 1.25;
            row.querySelector('[name="rate"]').value = rate.toFixed(2);

            // TOTAL calculation
            var hours = parseFloat(row.querySelector('[name="hour"]').value) || 0;
            var total = rate * hours;
            row.querySelector('[name="total"]').value = total.toFixed(2);

            // ALLOW calculation
            var allow = 70 * noOfDays;
            row.querySelector('[name="allow"]').value = allow.toFixed(2);

            var medicalReimbursement = parseFloat(row.querySelector('[name="medical_reimbursement"]').value) || 0;
            var hoursND = parseFloat(row.querySelector('[name="hours_nd"]').value) || 0;
            var percent10 = parseFloat(row.querySelector('[name="percent10"]').value) || 0;
            var hoursHP = parseFloat(row.querySelector('[name="hours_hp"]').value) || 0;
            var percent100 = parseFloat(row.querySelector('[name="percent100"]').value) || 0;


            // HOURS calculation
            var hoursInput = parseFloat(row.querySelector('[name="hours"]').value) || 0;
            var percent30 = hoursInput * 68.75 * 0.3;
            row.querySelector('[name="percent30"]').value = percent30.toFixed(2);

            // 10% calculation (Rate/HR * Hours * 0.1)
            var percent10Value = ratePerHour * hours * 0.1;
            row.querySelector('[name="percent10"]').value = percent10Value.toFixed(2);

            // 100% calculation (Hours/HP * Rate/HR)
            var percent100Value = hoursHP * ratePerHour;
            row.querySelector('[name="percent100"]').value = percent100Value.toFixed(2);

            // Gross pay calculation
            var grossPay = basicPay + total + allow + percent30 + medicalReimbursement + percent10 + percent100;
            row.querySelector('[name="gross_pay"]').value = grossPay.toFixed(2);

            // Deductions calculation
            var philhealth = parseFloat(row.querySelector('[name="philhealth"]').value) || 0;
            var sssLoan = parseFloat(row.querySelector('[name="sss_loan"]').value) || 0;
            var sss = parseFloat(row.querySelector('[name="sss"]').value) || 0;
            var hdmf = parseFloat(row.querySelector('[name="hdmf"]').value) || 0;
            var hdmfLoan = parseFloat(row.querySelector('[name="hdmf_loan"]').value) || 0;
            var insurance = parseFloat(row.querySelector('[name="insurance"]').value) || 0;
            var cashAdvance = parseFloat(row.querySelector('[name="cash_advance"]').value) || 0;
            var bhouse = parseFloat(row.querySelector('[name="bhouse"]').value) || 0;

            // Sum of all deductions
            var totalDeductions = philhealth + sssLoan + sss + hdmf + hdmfLoan + insurance + cashAdvance + bhouse;
            row.querySelector('[name="total_deductions"]').value = totalDeductions.toFixed(2);

            // Leave with Pay and Incentives
            var leaveWithPay = parseFloat(row.querySelector('[name="leave_with_pay"]').value) || 0;
            var incentives = parseFloat(row.querySelector('[name="incentives"]').value) || 0;

            // Add Leave with Pay and Incentives to Gross Pay
            grossPay += leaveWithPay + incentives;

            // Net pay calculation (Gross Pay - Total Deductions + Leave with Pay + Incentives)
            var netPay = grossPay - totalDeductions;
            row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);
        }

        function savePayrollData(employeeId) {
            var row = document.querySelector(`tr[data-employee-id="${employeeId}"]`);
            if (!row) {
                alert("Row not found for employee ID: " + employeeId);
                return;
            }

            var payrollData = {
                employee_id: employeeId,
                daily_rate: parseFloat(row.querySelector('[name="daily_rate"]').value) || 0,
                rate_per_hour: parseFloat(row.querySelector('[name="rate_per_hour"]').value) || 0,
                no_of_days: parseFloat(row.querySelector('[name="no_of_days"]').value) || 0,
                no_of_hours: parseFloat(row.querySelector('[name="no_of_hours"]').value) || 0,
                basic_pay: parseFloat(row.querySelector('[name="basic_pay"]').value) || 0,
                days: parseFloat(row.querySelector('[name="days"]').value) || 0,
                amount: parseFloat(row.querySelector('[name="amount"]').value) || 0,
                rate: parseFloat(row.querySelector('[name="rate"]').value) || 0,
                hour: parseFloat(row.querySelector('[name="hour"]').value) || 0,
                total: parseFloat(row.querySelector('[name="total"]').value) || 0,
                allow: parseFloat(row.querySelector('[name="allow"]').value) || 0,
                medical_reimbursement: parseFloat(row.querySelector('[name="medical_reimbursement"]').value) || 0,
                hours_nd: parseFloat(row.querySelector('[name="hours_nd"]').value) || 0,
                percent10: parseFloat(row.querySelector('[name="percent10"]').value) || 0,
                hours_hp: parseFloat(row.querySelector('[name="hours_hp"]').value) || 0,
                percent100: parseFloat(row.querySelector('[name="percent100"]').value) || 0,
                hours_hd: parseFloat(row.querySelector('[name="hours_hd"]').value) || 0,
                percent30: parseFloat(row.querySelector('[name="percent30"]').value) || 0,
                gross_pay: parseFloat(row.querySelector('[name="gross_pay"]').value) || 0,
                philhealth: parseFloat(row.querySelector('[name="philhealth"]').value) || 0,
                sss_loan: parseFloat(row.querySelector('[name="sss_loan"]').value) || 0,
                sss: parseFloat(row.querySelector('[name="sss"]').value) || 0,
                hdmf: parseFloat(row.querySelector('[name="hdmf"]').value) || 0,
                hdmf_loan: parseFloat(row.querySelector('[name="hdmf_loan"]').value) || 0,
                insurance: parseFloat(row.querySelector('[name="insurance"]').value) || 0,
                cash_advance: parseFloat(row.querySelector('[name="cash_advance"]').value) || 0,
                bhouse: parseFloat(row.querySelector('[name="bhouse"]').value) || 0,
                total_deductions: parseFloat(row.querySelector('[name="total_deductions"]').value) || 0,
                leave_with_pay: parseFloat(row.querySelector('[name="leave_with_pay"]').value) || 0,
                incentives: parseFloat(row.querySelector('[name="incentives"]').value) || 0,
                net_pay: parseFloat(row.querySelector('[name="net_pay"]').value) || 0
            };


            var medicalReimbursement = parseFloat(row.querySelector('[name="medical_reimbursement"]').value) || 0;
            var hoursND = parseFloat(row.querySelector('[name="hours_nd"]').value) || 0;
            var percent10 = parseFloat(row.querySelector('[name="percent10"]').value) || 0;
            var hoursHP = parseFloat(row.querySelector('[name="hours_hp"]').value) || 0;
            var percent100 = parseFloat(row.querySelector('[name="percent100"]').value) || 0;


            var hoursInput = parseFloat(row.querySelector('[name="hours"]').value) || 0;
            var percent30 = hoursInput * 68.75 * 0.3;
            var #007bff = parseFloat(row.querySelector('[name="percent30"]').value) || 0;
            var grossPay = parseFloat(row.querySelector('[name="gross_pay"]').value) || 0;
            var philhealth = parseFloat(row.querySelector('[name="philhealth"]').value) || 0;
            var sssLoan = parseFloat(row.querySelector('[name="sss_loan"]').value) || 0;
            var sss = parseFloat(row.querySelector('[name="sss"]').value) || 0;

            var hdmf = parseFloat(row.querySelector('[name="hdmf"]').value) || 0;
            var hdmfLoan = parseFloat(row.querySelector('[name="hdmf_loan"]').value) || 0;
            var insurance = parseFloat(row.querySelector('[name="insurance"]').value) || 0;
            var cashAdvance = parseFloat(row.querySelector('[name="cash_advance"]').value) || 0;
            var bhouse = parseFloat(row.querySelector('[name="bhouse"]').value) || 0;
            var totalDeductions = parseFloat(row.querySelector('[name="total_deductions"]').value) || 0;
            var leaveWithPay = parseFloat(row.querySelector('[name="leave_with_pay"]').value) || 0;
            var incentives = parseFloat(row.querySelector('[name="incentives"]').value) || 0;
            var netPay = parseFloat(row.querySelector('[name="net_pay"]').value) || 0;

            var employeeId = parseInt(row.querySelector('[name="employee_id"]').value) || 0;
            var employeeName = row.querySelector('[name="employee_name"]').value || '';
            var employeePosition = row.querySelector('[name="employee_position"]').value || '';
            var employeeStatus = row.querySelector('[name="employee_status"]').value || '';

            var employeeBranch = row.querySelector('[name="employee_branch"]').value || '';
            var employeeId = parseInt(row.querySelector('[name="employee_id"]').value) || 0;
            var employeeName = row.querySelector('[name="employee_name"]').value || '';
            var employeePosition = row.querySelector('[name="employee_position"]').value || '';
            var employeeStatus = row.querySelector('[name="employee_status"]').value || '';
            var employeeBranch = row.querySelector('[name="employee_branch"]').value || '';
            var employeeId = parseInt(row.querySelector('[name="employee_id"]').value) || 0;
            var employeeName = row.querySelector('[name="employee_name"]').value || '';
            var employeePosition = row.querySelector('[name="employee_position"]').value || '';
            // Removed invalid line
            



            fetch('save_payroll.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payrollData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Payroll data saved successfully!');
                } else {
                    alert('Error saving payroll data: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while saving payroll data.');
            });
        }

        // Attach the calculate function to inputs dynamically
        document.querySelectorAll('input').forEach(function(input) {
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);
            });
        }); 
    </script>

</body>
</html>



<php>
    <script>
        // Remove the invalid function declaration or complete it properly
        

        document.querySelectorAll('input').forEach(function(input) {
    input.addEventListener('input', function() {
        var row = this.closest('tr');
        calculatePayroll(row);
    });
});

function calculatePayroll(row) {
    // Retrieve input values
    var dailyRate = parseFloat(row.querySelector('[name="daily_rate"]').value) || 0;
    var noOfDays = parseFloat(row.querySelector('[name="no_of_days"]').value) || 0;
    var hoursND = parseFloat(row.querySelector('[name="hours_nd"]').value) || 0;
    var hoursHD = parseFloat(row.querySelector('[name="hours_hd"]').value) || 0;

    // Calculate Rate/HR
    var ratePerHour = dailyRate / 8;
    row.querySelector('[name="rate_per_hour"]').value = ratePerHour.toFixed(2);

    // Calculate Basic Pay
    var basicPay = dailyRate * noOfDays;
    row.querySelector('[name="basic_pay"]').value = basicPay.toFixed(2);

    // Calculate 10% (Night Differential)
    var tenPercent = ratePerHour * hoursND * 0.1;
    row.querySelector('[name="percent10"]').value = tenPercent.toFixed(2);

    // Calculate 30% (Holiday Differential)
    var thirtyPercent = ratePerHour * hoursHD * 0.3;
    row.querySelector('[name="percent30"]').value = thirtyPercent.toFixed(2);

    // Calculate Gross Pay
    var grossPay = basicPay + tenPercent + thirtyPercent;
    row.querySelector('[name="gross_pay"]').value = grossPay.toFixed(2);


    // Calculate Total Deductions
    var philhealth = parseFloat(row.querySelector('[name="philhealth"]').value) || 0;
    var sss = parseFloat(row.querySelector('[name="sss"]').value) || 0;
    var hdmf = parseFloat(row.querySelector('[name="hdmf"]').value) || 0;
    var totalDeductions = philhealth + sss + hdmf;
    row.querySelector('[name="total_deductions"]').value = totalDeductions.toFixed(2);

    // Calculate Net Pay
    var netPay = grossPay - totalDeductions;
    row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);
    // Removed invalid line or replace with a valid function call if needed


    // Removed invalid line or replace with a valid function call if needed

    document.querySelectorAll('input').forEach(function(input) {
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);

                document.querySelectorAll('input').forEach(function(input) {
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);


}



       

        

{{}}


function calculatePayroll(row) {
    // Retrieve input values
    var dailyRate = parseFloat(row.querySelector('[name="daily_rate"]').value) || 0; // Daily rate of the employee
    var noOfDays = parseFloat(row.querySelector('[name="no_of_days"]').value) || 0; // Number of days worked
    var hoursND = parseFloat(row.querySelector('[name="hours_nd"]').value) || 0; // Night differential hours
    var hoursHD = parseFloat(row.querySelector('[name="hours_hd"]').value) || 0; // Holiday differential hours
    var philhealth = parseFloat(row.querySelector('[name="philhealth"]').value) || 0; // PhilHealth deduction
    var sss = parseFloat(row.querySelector('[name="sss"]').value) || 0; // SSS deduction
    var hdmf = parseFloat(row.querySelector('[name="hdmf"]').value) || 0; // HDMF deduction
    var leaveWithPay = parseFloat(row.querySelector('[name="leave_with_pay"]').value) || 0; // Leave with pay
    var incentives = parseFloat(row.querySelector('[name="incentives"]').value) || 0; // Incentives

    // Calculate Rate/HR
    var ratePerHour = dailyRate / 8; // Hourly rate = Daily rate divided by 8 hours
    row.querySelector('[name="rate_per_hour"]').value = ratePerHour.toFixed(2);

    // Calculate Basic Pay
    var basicPay = dailyRate * noOfDays; // Basic pay = Daily rate multiplied by number of days worked
    row.querySelector('[name="basic_pay"]').value = basicPay.toFixed(2);

    // Calculate 10% (Night Differential)
    var tenPercent = ratePerHour * hoursND * 0.1; // 10% of hourly rate for night differential hours
    row.querySelector('[name="percent10"]').value = tenPercent.toFixed(2);

    // Calculate 30% (Holiday Differential)
    var thirtyPercent = ratePerHour * hoursHD * 0.3; // 30% of hourly rate for holiday differential hours
    row.querySelector('[name="percent30"]').value = thirtyPercent.toFixed(2);

    // Calculate Gross Pay
    var grossPay = basicPay + tenPercent + thirtyPercent; // Gross pay = Basic pay + 10% + 30%
    row.querySelector('[name="gross_pay"]').value = grossPay.toFixed(2);

    // Calculate Total Deductions
    var totalDeductions = philhealth + sss + hdmf; // Total deductions = Sum of PhilHealth, SSS, and HDMF
    row.querySelector('[name="total_deductions"]').value = totalDeductions.toFixed(2);

    // Calculate Net Pay
    var netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
    row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);
}





// Attach the calculate function to inputs dynamically

var net_pay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);


var netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);

var netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);
queueMicrotask
(function() {
    var netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
    row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);


    row netPay = grossPay- 
});
        // Attach the calculate function to inputs dynamically
        document.querySelectorAll('input').forEach(function(input) {
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);
            });
        });

        

        row.querySelector('[name="rate_per_hour"]').value = ratePerHour.toFixed(2);
        row.querySelector('[name="rate_per_hour"]').value = ratePerHour.toFixed(2);


        var net_pay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);


var netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);

var Net pay #007bff = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);
queueMicrotask

grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives

var netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives

row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);
    
    
            // Attach the calculate function to inputs dynamically
            document.querySelectorAll('input').forEach(function(input) {
                input.addEventListener('input', function() {
                    var row = this.closest('tr');
                    calculatePayroll(row);


                });
            });

            // Attach the calculate function to inputs dynamically
            document.querySelectorAll('input').forEach(function(input) {
                input.addEventListener('input', function() {
                    var row = this.closest('tr');
                    calculatePayroll(row);
                });
            });



            bro netPay = grossPay - totalDeductions + leaveWithPay + incentives; // Net pay = Gross pay - Total deductions + Leave with pay + Incentives
            row.querySelector('[name="net_pay"]').value = netPay.toFixed(2);    

        // Attach the calculate function to inputs dynamically
        document.querySelectorAll('input').forEach(function(input) {
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);


            
                
                // Removed invalid line or replace with a valid function call if needed
                window.onload = function() {
                    var rows = document.querySelectorAll('tr[data-employee-id]');
                    rows.forEach(function(row) {
                        calculatePayroll(row);
                    


                        
                    });
                };




            });
        });

</script>




</php>


 document.querySelectorAll('input').forEach(function(input) {
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);

            });
            <input type="text" class="addEventLi">
            input.addEventListener('input', function() {
                var row = this.closest('tr');
                calculatePayroll(row);
            });